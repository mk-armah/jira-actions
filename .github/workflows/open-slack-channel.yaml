name: Open Slack Channel
on:
  workflow_dispatch:
    inputs:
      channel_name:
        description: Name of the public or private channel to create.
        required: true
        type: string
      is_private:
        description: Create a private channel instead of a public one.
        required: false
        type: boolean
      team_id:
        description: Encoded team ID to create the channel in, required if org token is used.
        type: string
        required: false
      members:
        description: Add members manually to the channel.
        type: array
        required: false
      port_payload:
        description: Port's payload, including details for who triggered the action and general context (blueprint, run ID, etc...).
        required: true

jobs:
  open-slack-channel:
    runs-on: ubuntu-latest
    steps:
      - name: Log Executing Request to Open Channel
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "About to create a conversation channel in slack..."

      # - name: Create Slack Channel
      #   id: create_channel
      #   env:
      #     SLACK_TOKEN: ${{ secrets.BOT_USER_OAUTH_TOKEN }}
      #   run: |
      #     response=$(curl -s -X POST "https://slack.com/api/conversations.create" \
      #       -H "Authorization: Bearer $SLACK_TOKEN" \
      #       -H "Content-Type: application/json" \
      #       --data "{\"name\": \"${{ github.event.inputs.channel_name }}\",\"is_private\": ${{ github.event.inputs.is_private }} }")
          
      #     echo "API Response: $response"
      #     status=$(echo $response | jq -r '.ok')
          
      #     if [$status=true]; then
      #       channel_id=$(echo $response | jq -r '.channel.id')
      #       echo "Channel ID: $channel_id"
      #       echo "CHANNEL_ID=$channel_id" >> $GITHUB_ENV
      
      #     else
      #       echo "Failed to create Slack channel. Channel ID is null."
      #       error=$(echo $response | jq -r '.error')
      #       error_message="${error//_/ }
      #       echo "Error: $error_message"
      #       echo "CREATE_CHANNEL_ERROR=$error_message" >> $GITHUB_ENV
      #       exit 1
      #     fi

      - name: Log If Create Channel Request Fails
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Failed to create slack channel >>> ${{env.CREATE_CHANNEL_ERROR}}"

      - name: Log If Create Channel Request is Successful
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Channel created successfully, channel Id: ${{env.CHANNEL_ID}}"
          
      # - name: Add Members to Slack Channel
      #   id: add_members
      #   if: success()
      #   env:
      #     SLACK_TOKEN: ${{ secrets.BOT_USER_OAUTH_TOKEN }}
      #     CHANNEL_ID: C06QYNQQZU3
      #   run: |
      #     MEMBER_EMAILS=${{ toJSON(github.event.inputs.members) }}
      #     for email in $(echo $MEMBER_EMAILS | jq -r '.[]'); do
      #       user_response=$(curl -s -X GET "https://slack.com/api/users.lookupByEmail?email=$email" \
      #         -H "Authorization: Bearer $SLACK_TOKEN")
      
      #       get_user_response=$(echo $user_response | jq -r '.ok')
      
      #       if [[ "$get_user_response" == "true" ]]; then
      #         user_id=$(echo $user_response | jq -r '.user.id')
      #         invite_response=$(curl -s -X POST "https://slack.com/api/conversations.invite" \
      #           -H "Content-Type: application/json" \
      #           -H "Authorization: Bearer $SLACK_TOKEN" \
      #           --data "{\"channel\":\"$CHANNEL_ID\",\"users\":\"$user_id\"}")
      
      #         status=$(echo $invite_response | jq -r '.ok')
      #         if [[ "$status" == "false" ]]; then
      #           error=$(echo $invite_response | jq -r '.error')
      #           error="${error//_/ }"
      #           error_message="Failed to invite $email to channel: $error"
      #           echo $error_message
      #           echo "ADD_MEMBER_TO_CHANNEL_ERROR=$error_message" >> $GITHUB_ENV
      #           exit 1
      #         fi
      #       else
      #         error=$(echo $user_response | jq -r '.error')
      #         error="${error//_/ }"
      #         error_message="Could not get user details for $email: $error"
      #         echo $error_message
      #         echo "ADD_MEMBER_TO_CHANNEL_ERROR=$error_message" >> $GITHUB_ENV
      #         exit 1 
      #       fi
      #     done
      
      - name: Add Members to Slack Channel
        id: add_members
        if: success()
        env:
          SLACK_TOKEN: ${{ secrets.BOT_USER_OAUTH_TOKEN }}
          CHANNEL_ID: C06QYNQQZU3
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          # Step 1: Get the Port access token
          PORT_TOKEN_RESPONSE=$(curl -s -X 'POST' \
          curl -X 'POST' \
            'https://api.getport.io/v1/auth/access_token' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -d "{
                  \"clientId\": \"$clientId\",
                  \"clientSecret\": \"$clientSecret\"
                }"
              )

          echo $PORT_TOKEN_RESPONSE
          PORT_ACCESS_TOKEN=$(echo $PORT_TOKEN_RESPONSE | jq -r '.accessToken')
      
          # Ensure the access token was obtained successfully
          if [ -z "$PORT_ACCESS_TOKEN" ] || [ "$PORT_ACCESS_TOKEN" == "null" ]; then
            echo "Failed to obtain Port access token"
            exit 1
          fi
      
          # Step 2: The rest of your script
          run_id=${{ fromJson(github.event.inputs.port_payload).context.runId }}
          user_ids=""
          MEMBER_EMAILS=${{ toJSON(github.event.inputs.members) }}
      
          function report_error {
            local message=$1
            echo $message
            echo "ADD_MEMBER_TO_CHANNEL_ERROR=$message" >> $GITHUB_ENV
            curl -s -X POST "https://api.getport.io/v1/actions/runs/$run_id/logs" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $PORT_ACCESS_TOKEN" \
              -d "{\"message\": \"$message\"}"
          }
      
          for email in $(echo $MEMBER_EMAILS | jq -r '.[]'); do
            user_response=$(curl -s -X GET "https://slack.com/api/users.lookupByEmail?email=$email" \
              -H "Authorization: Bearer $SLACK_TOKEN")
      
            if [[ "$(echo $user_response | jq -r '.ok')" == "true" ]]; then
              user_id=$(echo $user_response | jq -r '.user.id')
              user_ids+="${user_id},"
            else
              error_message="Could not get user details for $email: $(echo $user_response | jq -r '.error' | tr '_' ' ')"
              report_error "$error_message"
            fi
          done
      
          user_ids=${user_ids%,}
      
          if [[ -n "$user_ids" ]]; then
            invite_response=$(curl -s -X POST "https://slack.com/api/conversations.invite" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $SLACK_TOKEN" \
              --data "{\"channel\":\"$CHANNEL_ID\",\"users\":\"$user_ids\"}")
      
            if [[ "$(echo $invite_response | jq -r '.ok')" == "false" ]]; then
              error_message="Failed to invite users to channel: $(echo $invite_response | jq -r '.error' | tr '_' ' ')"
              report_error "$error_message"
            fi
          else
            report_error "No user IDs found to invite."
          fi

      - name: Log If Request to Add Members is Successful
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Successfully opened slack channel: $channel_id âœ…"
