name: Open Slack Channel
on:
  workflow_dispatch:
    inputs:
      channel_name:
        description: Name of the public or private channel to create.
        required: true
        type: string
      is_private:
        description: Create a private channel instead of a public one.
        required: false
        type: boolean
      team_id:
        description: Encoded team ID to create the channel in, required if org token is used.
        type: string
        required: false
      members:
        description: Add members manually to the channel.
        type: array
        required: false
      port_payload:
        description: Port's payload, including details for who triggered the action and general context (blueprint, run ID, etc...).
        required: true

jobs:
  open-slack-channel:
    runs-on: ubuntu-latest
    steps:
      - name: Log Executing Request to Open Channel
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "About to create a conversation channel in slack..."

      # - name: Create Slack Channel
      #   id: create_channel
      #   env:
      #     SLACK_TOKEN: ${{ secrets.BOT_USER_OAUTH_TOKEN }}
      #   run: |
      #     response=$(curl -s -X POST "https://slack.com/api/conversations.create" \
      #       -H "Authorization: Bearer $SLACK_TOKEN" \
      #       -H "Content-Type: application/json" \
      #       --data "{\"name\": \"${{ github.event.inputs.channel_name }}\",\"is_private\": ${{ github.event.inputs.is_private }} }")
  
      #     # Log the response for debugging
      #     echo "API Response: $response"
          
      #     # Extract the channel ID
      #     channel_id=$(echo $response | jq -r '.channel.id')
          
      #     # Check if the channel ID is not null
      #     if [[ "$channel_id" != "null" && "$channel_id" != "" ]]; then
      #       echo "Channel ID: $channel_id"
      #       # Use GITHUB_ENV to set the channel_id environment variable for subsequent steps
      #       echo "CHANNEL_ID=$channel_id" >> $GITHUB_ENV
      #     else
      #       echo "Failed to create Slack channel. Channel ID is null."
      #       # Extract and log the error message from the response
      #       error_message=$(echo $response | jq -r '.error')
      #       echo "Error: $error_message"
      #       exit 1
      #     fi


      - name: Log If Request Fails
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Request to create Slack channel failed..."
          
      - name: Add Members to Slack Channel
        id: add_members
        if: success()
        env:
          SLACK_TOKEN: ${{ secrets.BOT_USER_OAUTH_TOKEN }}
        run: |
          MEMBER_EMAILS=${{ toJSON(github.event.inputs.members) }}
          declare -a already_in_channel_users=()
          for email in $(echo $MEMBER_EMAILS | jq -r '.[]'); do
            user_id=$(curl -s -X POST "https://slack.com/api/users.lookupByEmail?email=$email" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -H "Authorization: Bearer $SLACK_TOKEN" | jq -r '.user.id')
            if [ "$user_id" != "null" ]; then
              invite_response=$(curl -s -X POST "https://slack.com/api/conversations.invite" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $SLACK_TOKEN" \
                --data "{\"channel\":\"$CHANNEL_ID\",\"users\":\"$user_id\"}")
              error=$(echo $invite_response | jq -r '.error')
              if [ "$error" = "already_in_channel" ]; then
                # Add user IDs to the array
                already_in_channel_users+=("$email")
              fi
            else
              echo "User ID not found for email $email"
            fi
          done
          # Convert the array to a JSON array string and save to an environment variable
          already_in_channel_json=$(printf '%s\n' "${already_in_channel_users[@]}" | jq -R . | jq -cs .)
          echo "ALREADY_IN_CHANNEL_USERS_JSON=$already_in_channel_json" >> $GITHUB_ENV

      - name: Report Already Existing Users to Port
        if: env.ALREADY_IN_CHANNEL_USERS_JSON
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Users ${{ env.ALREADY_IN_CHANNEL_USERS_JSON }} are already in the Slack channel."

      - name: Log If Request to Add Members Fails
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Failed to add members to Slack channel..."
