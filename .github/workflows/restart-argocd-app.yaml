name: Restart Deployment in Argo CD

on:
  workflow_dispatch:
    inputs:
      application_name:
        description: 'Argo CD Application Name'
        required: true
      insecure:
        description: 'Use insecure connection (true/false)'
        required: false
        default: 'false'
      application_server:
        description: 'Argo CD server address'
        required: false
      port_payload:
        required: true
        description: >-
          Port's payload, including details for who triggered the action and
          general context (blueprint, run id, etc...)

jobs:
  restart-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Report Failure In Installing Argo CD CLI
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to install Argo CD CLI ❌"

      - name: Report Successful Installation of Argo CD CLI
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Successfully installed Argo CD CLI ✅"

      - name: Set Insecure Flag
        id: set-insecure
        run: |
          echo "INSECURE_FLAG=" >> $GITHUB_ENV
          if [ "${{ inputs.insecure }}" == "true" ]; then
            echo "--insecure" >> $GITHUB_ENV
          fi
      
      - name: Login to Argo CD
        run: |
          argocd login ${{ inputs.application_server }} --username ${{ secrets.ARGO_CD_USERNAME }} --password ${{ secrets.ARGO_CD_PASSWORD }} $INSECURE_FLAG
        env:
          ARGO_CD_SERVER: ${{ inputs.application_server }}
          ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
          ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}

      - name: Report Failed Login to Argo CD
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to login to Argo CD, please check your provided credentials ❌"
          
      - name: Report Successful Login to Argo CD
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Successfully logged in to Argo CD via the CLI ✅"

      - name: Restart Deployment via Argo CD
        run: |
          argocd app actions run ${{ inputs.application_name }} restart --kind Deployment

      - name: Report Failure in Restarting Argo CD Deployment
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to restart Argo CD Deployment ❌"

      - name: Report Successful Restarting of Argo CD Deployment
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Successfully restarted Deployment ✅"

      - name: Obtain Argo CD Access Token
        run: |
          RESPONSE=$(curl -k -sSf -X POST "https://${{inputs.application_server}}/api/v1/session" \
            -d '{"username":"${{ secrets.ARGO_CD_USERNAME }}", "password":"${{ secrets.ARGO_CD_PASSWORD }}"}' \
            -H 'Content-Type: application/json')
          echo "ARGO_CD_TOKEN=$(echo $RESPONSE | jq -r '.token')" >> $GITHUB_ENV
        env:
          ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
          ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}

      - name: Get Application Details via API
        id: get_app_details
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://${{inputs.application_server}}/api/v1/applications/${{ github.event.inputs.appName }}'
          method: 'GET'
          customHeaders: '{ "Content-Type": "application/json" ,"Authorization": "Bearer ${{env.ARGO_CD_TOKEN}}" }'

      - name: Get Application Details via API CURL
        run: |
          RESPONSE=$(curl -k -sSf -H "Authorization: Bearer ${{env.ARGO_CD_TOKEN}}" \
               "https://${{inputs.application_server}}/api/v1/applications/${{ inputs.application_name }}")
          echo "APP_DETAILS=$(echo $RESPONSE)" >> $GITHUB_ENV
          echo $RESPONSE

