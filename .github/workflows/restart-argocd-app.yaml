name: Restart Deployment in Argo CD

on:
  workflow_dispatch:
    inputs:
      application_name:
        description: 'Argo CD Application Name'
        required: true
      insecure:
        description: 'Use insecure connection (true/false)'
        required: false
        default: 'false'
      application_server:
        description: 'Argo CD server address'
        required: false
      port_payload:
        required: true
        description: >-
          Port's payload, including details for who triggered the action and
          general context (blueprint, run id, etc...)

jobs:
  restart-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Report Failure In Installing Argo CD CLI
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to install Argo CD CLI ❌"

      - name: Report Successful Installation of Argo CD CLI
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Successfully installed Argo CD CLI ✅"

      - name: Set Insecure Flag
        id: set-insecure
        run: |
          echo "INSECURE_FLAG=" >> $GITHUB_ENV
          if [ "${{ inputs.insecure }}" == "true" ]; then
            echo "--insecure" >> $GITHUB_ENV
          fi
      
      - name: Login to Argo CD
        run: |
          argocd login ${{ inputs.application_server }} --username ${{ secrets.ARGO_CD_USERNAME }} --password ${{ secrets.ARGO_CD_PASSWORD }} $INSECURE_FLAG
        env:
          ARGO_CD_SERVER: ${{ inputs.application_server }}
          ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
          ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}

      - name: Report Failed Login to Argo CD
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to login to Argo CD, please check your provided credentials ❌"
          
      - name: Report Successful Login to Argo CD
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Successfully logged in to Argo CD via the CLI ✅"

      - name: Restart Deployment via Argo CD
        run: |
          argocd app actions run ${{ inputs.application_name }} restart --kind Deployment

      - name: Report Failure in Restarting Argo CD Deployment
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to restart Argo CD Deployment ❌"

      - name: Report Successful Restarting of Argo CD Deployment
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Successfully restarted Deployment ✅"

      - name: Report Wait for Application Stability
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Waiting for application to stabilize ... "

      - name: Wait for Application Stability
        run: |
          argocd app wait ${{ inputs.application_name }} --sync
          argocd app wait ${{ inputs.application_name }} --health
        timeout-minutes: 60

      - name: Report Healthy State
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Application reach a synchronized state and is Healthy ✅"

      - name: Report Application Instability
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Application failed to stabilize ❌"

      # - name: Fetch Application Details
      #   id: app_details
      #   run: |
      #     argocd app get ${{ inputs.application_name }} --output json

      - name: Fetch Application Details
        id: app_details
        run: |
          argocd app get ${{ inputs.application_name }} --output json > app_details.json
          echo "response<<EOF" >> $GITHUB_ENV
          cat app_details.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Report Application Status
        run: |
          echo "Application Status:"
          echo "${{ steps.app_details.outputs.result }}"
            
      - name: Log Before Upserting Entity
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Reporting the restarted application back to port ..."

      - name: Use Application Details
        run: |
          echo "Application Details: $response"
          
      - name: UPSERT Entity
        uses: port-labs/port-github-action@v1
        with:
          identifier: ${{env.response.metadata.uid}}
          title: "${{env.response.metadata.name}}"
          blueprint: ${{ fromJson(inputs.port_payload).context.blueprint }}
          properties: |
            {
              "namespace": "${{env.response.metadata.namespace}}",
              "gitRepo": "${{env.response.spec.source.repoURL}}",
              "gitPath": "${{env.response.spec.source.path}}",
              "destinationServer": "${{env.response.spec.destination.server}}",
              "syncStatus": "${{env.response.status.sync.status}}",
              "healthStatus": "${{env.response.status.health.status}}",
              "createdAt": "${{env.response.metadata.creationTimestamp}}"
            }
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          runId: ${{ fromJson(inputs.port_payload).context.runId }}

      - name: Log If Upsetting Entity Fails 
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Failed to upsert restarted argocd application entity to port ..."
          
      - name: Log After Upserting Entity
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "Entity upserting was successful ✅"
